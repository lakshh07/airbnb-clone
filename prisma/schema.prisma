generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String  @id @default(uuid()) @db.VarChar(50)
  user_id             String  @db.VarChar(50)
  type                String  @db.VarChar(50)
  provider            String  @db.VarChar(50)
  provider_account_id String  @db.VarChar(50)
  refresh_token       String? @db.VarChar(100)
  access_token        String? @db.VarChar(100)
  expires_at          Int?
  token_type          String? @db.VarChar(50)
  scope               String? @db.VarChar(50)
  id_token            String? @db.VarChar(100)
  session_state       String? @db.VarChar(50)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // @@index([user_id], map: "user_id")

  @@unique([provider, provider_account_id])
}

model Listing {
  id             String    @id @default(uuid()) @db.VarChar(50)
  title          String    @db.VarChar(200)
  description    String    @db.LongText
  image_url      String    @db.VarChar(2048)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  category       String    @db.VarChar(100)
  room_count     Int
  bathroom_count Int
  guest_count    Int
  location_value String    @db.VarChar(500)
  user_id        String    @db.VarChar(50)
  price          Int

  // @@index([user_id], map: "user_id")
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id          String    @id @default(uuid()) @db.VarChar(50)
  user_id     String    @db.VarChar(50)
  listing_id  String    @db.VarChar(50)
  start_date  DateTime  @db.Timestamp(0)
  end_date    DateTime  @db.Timestamp(0)
  total_price Int
  created_at  DateTime? @default(now()) @db.Timestamp(0)

  // @@index([listing_id], map: "listing_id")
  // @@index([user_id], map: "user_id")
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listing_id], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(uuid()) @db.VarChar(50)
  name            String?   @db.VarChar(100)
  email           String?   @unique(map: "email") @db.VarChar(320)
  email_verified  DateTime? @db.DateTime(0)
  image           String?   @db.VarChar(2048)
  hashed_password String?   @db.VarChar(500)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  favourite_ids   String?   @db.VarChar(100)

  account      Account[]
  listings     Listing[]
  reservations Reservation[]
}
